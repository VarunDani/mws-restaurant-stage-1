class DBHelper{static getRestaurantDB(){return idb.open("mws_restaurants_info",4,e=>{switch(e.oldVersion){case 0:if(!e.objectStoreNames.contains("restaurants_mst"))e.createObjectStore("restaurants_mst",{keyPath:"id"});case 1:if(!e.objectStoreNames.contains("reviews_mst"))e.createObjectStore("reviews_mst",{keyPath:"id"}).createIndex("group_by_restaurant","restaurant_id",{unique:!1});case 2:if(!e.objectStoreNames.contains("pending_review_transactions"))e.createObjectStore("pending_review_transactions",{autoIncrement:!0});case 3:if(!e.objectStoreNames.contains("pending_favorite_transactions"))e.createObjectStore("pending_favorite_transactions",{keyPath:"id"})}})}static get DATABASE_URL(){return"http://localhost:1337"}static get RESTAURANT_URL(){return DBHelper.DATABASE_URL+"/restaurants"}static RESTAURANT_URL_BY_ID(e){return DBHelper.RESTAURANT_URL+"/"+e}static RESTAURANT_GET_REVIEW(e){return DBHelper.DATABASE_URL+"/reviews/?restaurant_id="+e}static get RESTAURANT_POST_REVIEW(){return DBHelper.DATABASE_URL+"/reviews/"}static RESTAURANT_MARK_FAVORITE(e,t){return DBHelper.DATABASE_URL+"/restaurants/"+e+"/?is_favorite="+t}static fetchRestaurants(e){let t=DBHelper.RESTAURANT_URL;fetch(t,{method:"GET"}).then(e=>e.json()).then(t=>{self.allRestaurents=t,DBHelper.getRestaurantDB().then(function(n){if(!n)return e(null,t);let r=n.transaction("restaurants_mst","readwrite"),a=r.objectStore("restaurants_mst");return t.forEach(e=>a.put(e)),r.complete}),e(null,t)}).catch(t=>{console.log("Getting All Restaurents From Cache Storage: "+t),DBHelper.getAllCachedRestaurants(null).then(t=>{if(t.length>0)return e(null,t)}).catch(n=>{console.log("Problem in getting Cached Restaurents "),e(t,null)})})}static fetchRestaurantById(e,t){let n=DBHelper.RESTAURANT_URL_BY_ID(e);fetch(n,{method:"GET"}).then(e=>e.json()).then(e=>{DBHelper.getRestaurantDB().then(function(n){if(!n)return t(null,e);n.transaction("restaurants_mst","readwrite").objectStore("restaurants_mst").put(e)}),t(null,e)}).catch(n=>{console.log("Getting Specific Restaurant From Cache Storage"),DBHelper.getAllCachedRestaurants(e).then(e=>{if(e)return t(null,e)}).catch(e=>{console.log("Problem in getting Restaurent from Cache storage "),t(n,null)})})}static fetchRestaurantByCuisine(e,t){DBHelper.getAllCachedRestaurants(null,(n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.getAllCachedRestaurants(null,(n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){if(self.allRestaurents){let r=self.allRestaurents;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}else console.log("1.2"),DBHelper.fetchRestaurants((r,a)=>{if(r)n(r,null);else{let r=a;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){if(self.allRestaurents){const t=self.allRestaurents.map((e,t)=>self.allRestaurents[t].neighborhood),n=t.filter((e,n)=>t.indexOf(e)==n);e(null,n)}else console.log("2.2"),DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){if(self.allRestaurents){const t=self.allRestaurents.map((e,t)=>self.allRestaurents[t].cuisine_type),n=t.filter((e,n)=>t.indexOf(e)==n);e(null,n)}else console.log("3.2"),DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e.photograph?`/images/${e.photograph}`:`/images/${e.id}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static getAllCachedRestaurants(e){return DBHelper.getRestaurantDB().then(function(t){if(!t)return;let n=t.transaction("restaurants_mst").objectStore("restaurants_mst");return null!==e?n.get(Number(e)):n.getAll()}).catch(e=>{console.log("Problem in Getting All Restaurents "+e)})}static fetchReviewsById(e,t){let n=DBHelper.RESTAURANT_GET_REVIEW(e);fetch(n,{method:"GET"}).then(e=>e.json()).then(e=>{DBHelper.getRestaurantDB().then(function(n){if(!n)return t(null,e);let r=n.transaction("reviews_mst","readwrite").objectStore("reviews_mst");e.forEach(e=>r.put(e))}),t(null,e)}).catch(n=>{console.log("Getting Review From Cache Storage"),DBHelper.getAllCachedReviews(e).then(e=>{if(e)return t(null,e)}).catch(e=>{console.log("Problem in getting Reviews from Cache storage "),t(n,null)})})}static getAllCachedReviews(e){return DBHelper.getRestaurantDB().then(function(t){let n=t.transaction("reviews_mst").objectStore("reviews_mst");return null!==e?n.index("group_by_restaurant").get(e):n.getAll()}).catch(e=>{console.log("Problem in Getting Reviews for Restaurents "+e)})}static saveReview(e,t,n,r,a,s){let l=DBHelper.RESTAURANT_POST_REVIEW,i={restaurant_id:e,name:t,rating:n,comments:r};fetch(l,{method:"POST",body:JSON.stringify(i)}).then(e=>e.json()).then(e=>{DBHelper.getRestaurantDB().then(function(t){if(!t)return s(null,e);let n=t.transaction("reviews_mst","readwrite");return n.objectStore("reviews_mst").put(e),n.complete}),s(null,e)}).catch(e=>{DBHelper.getRestaurantDB().then(e=>{if(!e)return;let t=e.transaction("pending_review_transactions","readwrite"),n=t.objectStore("pending_review_transactions");return i.createdAt=a,i.updatedAt=a,n.put(i),t.complete}),s(e,null)})}static syncPendingReviews(){return DBHelper.getRestaurantDB().then(function(e){let t=e.transaction("pending_review_transactions","readwrite").objectStore("pending_review_transactions"),n=t.getAll();return t.clear(),n}).then(e=>{console.log("Uploading pending Reviews "),e.forEach(e=>{DBHelper.saveReview(e.restaurant_id,e.name,e.rating,e.comments,e.date,(e,t)=>{e&&DBHelper.enableBackgroundSync()})})}).catch(e=>{console.log("Problem in Review Sync: "+e)})}static markRestaurantFavorite(e,t){let n=DBHelper.RESTAURANT_MARK_FAVORITE(e.id,e.is_favorite);fetch(n,{method:"PUT"}).then(e=>e.json()).then(n=>{DBHelper.getRestaurantDB().then(function(t){if(!t)return;let n=t.transaction("restaurants_mst","readwrite");return n.objectStore("restaurants_mst").put(e),n.complete}).catch(e=>{console.log("Problem in Updating Cached Restaurant "+e)});t(null,n)}).catch(n=>{DBHelper.getRestaurantDB().then(t=>{if(!t)return;let n=t.transaction("pending_favorite_transactions","readwrite");return n.objectStore("pending_favorite_transactions").put(e),n.complete}),t(n,null)})}static syncPendingFavorite(){return DBHelper.getRestaurantDB().then(function(e){let t=e.transaction("pending_favorite_transactions","readwrite").objectStore("pending_favorite_transactions"),n=t.getAll();return t.clear(),n}).then(e=>{console.log("Updating pending Favorite "),e.forEach(e=>{DBHelper.markRestaurantFavorite(e,(e,t)=>{e&&DBHelper.enableBackgroundSync()})})}).catch(e=>{console.log("Problem in Favorite Sync: "+e)})}static enableBackgroundSync(){console.log(":: Enable background sync ::"),navigator.serviceWorker.ready.then(function(e){e.sync.register("syncApp").then(function(){console.log("Registration of it successfull")},function(){console.log("Problem in Registration of background sync ")})})}static syncPendingData(){DBHelper.syncPendingReviews(),DBHelper.syncPendingFavorite()}}
